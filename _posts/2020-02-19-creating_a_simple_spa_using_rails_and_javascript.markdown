---
layout: post
title:      "Creating a Simple SPA Using Rails and JavaScript"
date:       2020-02-20 00:17:02 +0000
permalink:  creating_a_simple_spa_using_rails_and_javascript
---


For this project we were tasked to build a SPA using Rails as our backend and Javascript as our frontend. I chose to create an app that could help a family or group of friends decide what they would want to eat when they shared meals. The idea came from the frustration I would experience trying to plan meals for a group when everyone wanted something different or were indecisive. Oh the dreaded ‘I dunno’ response! So my app allows the user to create a meal with a date and then add options to that meal.  Then your family or friends could vote on the different options.  Whatever meal got the most votes wins!

Creating a SPA is a little different than the last project in that I needed to adapt the Model, View, Create structure of Rails to render JSON strings. Then we would pick up the JSON as objects with a fetch in JavaScript. In order to get off the ground quickly I started making my backend with an API-only build. This is done with using the same generator we normally would plus an --api tag. There are two noticeable things this did for me. Since I am now using Rails as an interface to communicate with an external system, it made it so the controllers inherit from ActionController::API instead of ActionController::Base. The reason at least partially is that because there is no need to generate views, we want it for its ability to share data or useful functions to use in the front end of my app. Once the basic file structure was built, I went ahead and created two resources: Meal and Options.  I set up their relationship as Meal having many Options and Options belonging to Meal. 

The next step I decided on was to create a set of basic controllers for each resource. I attempted to use a Serializer called Fast JSON API in order to customize my JSON rendering but I had many difficulties getting it to work. And since my project was rather simple there wasn’t much need for the customization. So for now I have chosen to just structure my data simply using an option like ‘only:’ in my render.  I used the Rails console along with some fetches in the browser console to make sure my controller was working and then moved on to my front end fetches. 

I decided to structure my basic fetch functionality as static methods in a MealVoterApi class. This way I could reduce the reuse of code by using them in a specific static methods like getMeals and getOptions. I also wanted my JSON objects that came back to be turned into Meal and Option objects. So I created Meal and Option classes with constructors as well as a method that took in a JSON object and created a new Meal/Option object utilizing the JSON object attributes. This kept my data nice and clean as well as contained in the right packages, which I feel helped me keep some clarity as I was building the rest of the app.

Once my fetches were working well I moved on to the final big piece of code. The rendering. That would be a good thriller/horror movie title, don’t you think? In my case the rendering wasn’t very scary. My HTML file contained a basic outline with the title, head, header, and main. As well as my source files that needed to be loaded by the html. The rest of the HTML was created in my MealVoterRenderer Class contained in a JavaScript file with the same name. I made six static methods, starting with one to render the page, render the meals, render the options, and finally the methods that acted as callbacks on my event listeners. This was probably the trickiest of the JavaScript to deal with. I had to make sure I had a way to access the right meals that went with the correct options as well as render order was done properly. It was really satisfying to see my SPA working in the browser. But it was ugly. Without any styling the form fields are not much to look at. 

So finally onto CSS styling. Without much knowledge of CSS I delved into making my clumpy boring form fields and buttons into something someone wouldn’t cringe to look at. I will say it is challenging but thankfully there are tons of websites dedicated to giving people examples. Really it seems like there are tons of ways to style your code. I found going into the console and playing with inspect element, style, and how elements are padded, margined, and have width and length was the best way to figure out how to make everything look how you want. Or at the very least a kinder visual experience. I spent a good amount of time on this part and am generally pleased with how it looks. Is it exactly how I want it to look...no, not really. But the more I work with it and learn, the more excited I am with the possibilities of what can be done to make the user visual experience better. 



